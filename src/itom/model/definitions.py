"""Dynamically calculated configurations for the application. Depend on
loaded user settings.

Classes
    Settings: Dynamically loaded user settings.
    GUIStructure: Semi-dynamically calculated GUI settings, which are
        partially dependant on user settings.
"""

from configparser import ConfigParser
from pathlib import Path
from typing import Optional

from appdirs import AppDirs


class Settings:
    """Dynamically loaded user settings.

    Attributes:
        app_root_dir(Path): The root directory of the application.
        data_dir(str): The directory in which the application stores
            data or retrieves it from.
        dirs(AppDirs): Stores OS specific directory paths, e.g., for
            data or config files.
        config(ConfigParser): The loaded config parser form which to
            retrieve user settings from.
        name(str): The name of the settings file.
    """

    app_root_dir = Path(__file__).parent.parent.parent.parent
    data_dir = f"{app_root_dir}/data"

    def __init__(
        self, app_name: str, app_author: str, settings_file_path: Optional[str] = None
    ) -> None:
        """
        Args
            app_name: The name of the application.
            app_author: The name of the author or the organization
                which is publishing the application.
            settings_file_path: The file path for the config file. If not
                given, the application attempts to read from the system
                user settings directory. See appdirs directory for more
                info.
        """
        self.dirs = AppDirs(app_name, app_author)
        self.config = self.load_config_file(settings_file_path)
        self.load_settings()

    def load_config_file(
        self, settings_file_path: Optional[str] = None
    ) -> ConfigParser:
        default_config_path = f"{self.app_root_dir}/config/default.ini"
        if settings_file_path is not None:
            user_config = settings_file_path
        else:
            user_config = f"{self.dirs.user_config_dir}/settings.ini"
        config_parser = ConfigParser()

        if Path(user_config).is_file():
            config_parser.read(user_config)
        else:
            config_parser.read(default_config_path)
        return config_parser

    def load_settings(self) -> None:
        """Calculates options for the application based on user
        settings.
        """
        self.name = self.config["DEFAULT"]["settings_name"]


class GUIStructure:
    """Semi-dynamically calculated GUI settings, which are partially
    dependant on user settings.

    Attention: Doesn't include theme color settings. Those are
    generated by the first ttkbootstrap component.
    """

    def __init__(self, settings: Settings):
        """
        Args
            settings: A user settings object.
        """
        self.settings = settings

        self._load_gui_settings()

    def _load_gui_settings(self) -> None:
        """Loads and calculates values dependant on user settings."""

        self.fonts = {
            "Default": ("Helvetica", 16),
            "H1": ("Helvetica", 36),
        }

        self.buttons = {
            "world_selection": {
                "font": self.fonts["Default"],
                "padx": 25,
                "pady": 25,
            }
        }
